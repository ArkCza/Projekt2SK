package rumba_main;

import java.io.*;
import java.net.ServerSocket;
import java.net.Socket;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.io.BufferedReader;
import java.io.DataInputStream;
import java.io.EOFException;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileReader;
import java.io.IOException;
import java.net.DatagramPacket;
import java.net.DatagramSocket;
import java.net.InetAddress;
import java.net.SocketTimeoutException;
import java.util.List;
import java.util.ArrayList;

public class Serwer {

   public static void main(String[] args) throws IOException {
	   
		
	   final int PORT = 50000;
	   
       ExecutorService executorService = Executors.newFixedThreadPool(10);
       
       
       while (true){
    	   
    	   DatagramSocket socket = new DatagramSocket(PORT);
           
           Runnable connection = new Runnable() {
               @Override
               public void run() {
            	   
            	   	DatagramPacket inPacket = null; //recieving packet
              		DatagramPacket outPacket = null; //sending packet
              		byte[] inBuf, outBuf;
              		String msg,user,chosen_address="",chosen_dir="",login,oneuser,reponse="";
              		int chosen_port=0,rozm;
              		List<Integer> ports = new ArrayList<Integer>();
              		List<String> logins = new ArrayList<String>();
              		List<String> addresses = new ArrayList<String>();
              		List<String> users = new ArrayList<String>();
              		List<String> directories = new ArrayList<String>();
              		
              		StringBuilder sbuild = null;
              		int BUFFERSIZE=5000;
            	   

                   try {
                	   
                	   System.out.println("\nRunning...\n");
       				
           				inBuf = new byte[BUFFERSIZE];
           				inPacket = new DatagramPacket(inBuf, inBuf.length); //odebranie pustego stringa
           				socket.receive(inPacket);
           				int source_port = inPacket.getPort();
           				Integer sport = Integer.valueOf(source_port);
           				System.out.println(sport);
           				InetAddress source_address = inPacket.getAddress();
           				System.out.println(source_address);
           				addresses.add(source_address.toString());
           				msg = new String(inPacket.getData(), 0, inPacket.getLength()); //przypisanie do zmiennej msg na serwerze - nawiazanie polaczenia
           			
           			
           				inBuf = new byte[BUFFERSIZE];
           				inPacket = new DatagramPacket(inBuf, inBuf.length); //odebranie loginu
           				socket.receive(inPacket);
           				login = new String(inPacket.getData(), 0, inPacket.getLength());
           				logins.add(login);
           			
           			/*
           			for(int i=0;i<logins.size();i++) {
           				user="Client - "+(String)logins.get(i)+" : "+(String)addresses.get(i)+":"+50000;
           				System.out.println(user); //wyswietlanie listy klientow
           				users.add(user);
           			}
           			
           			*/
           			
           				inBuf = new byte[BUFFERSIZE];
           				inPacket = new DatagramPacket(inBuf, inBuf.length); //odebranie katalogu
           				socket.receive(inPacket);
           				String catalog = new String(inPacket.getData(), 0, inPacket.getLength());
           			//System.out.println("Zapisano udostepniany katalog: "+catalog);
           				directories.add(catalog);
           			
           				System.out.println("Zapisano udostepniany katalog: "+directories.get(0));
           			
           			
           			while(true) {
           				
           				
           				inBuf = new byte[BUFFERSIZE];
           				inPacket = new DatagramPacket(inBuf, inBuf.length); //odebranie wyboru do switcha
           				socket.receive(inPacket);
           				String ch = new String(inPacket.getData(), 0, inPacket.getLength());
           				int choice = Integer.valueOf(ch);
           				
           				switch(choice) {
           				case 1:
           					//WSTAWKA DLA WIELU UZYTKOWNIKOW 


           					
           					
           					
           					
           					StringBuilder sb = new StringBuilder("\n");
           					String dirname = directories.get(0); //dir wybranego usera pozniej
           					File f1=new File(dirname);
           					File fl[]=f1.listFiles();
           					
           					int c = 0;
           					
           					for(int i=0; i<fl.length; i++) {
           						
           						if(fl[i].canRead())
           							c++;
           					}
           					
           					sb.append(c+" files found.\n\n");
           					
           					for(int i=0; i<fl.length; i++) {
           						
           						sb.append(fl[i].getName()+" "+fl[i].length()+ " Bytes\n");
           						
           					}
           					
           					sb.append("\nEnter file name for download: ");
           					outBuf = (sb.toString()).getBytes();
           					outPacket = new DatagramPacket(outBuf, 0, outBuf.length, source_address, source_port); //WYSLANIE ZAPYTANIA O PLIKI DO POBRANIA - PO WYBRANIU UZYTKOWNIKA
           					socket.send(outPacket);
           					
           					inBuf = new byte[10000];
           					inPacket = new DatagramPacket(inBuf, inBuf.length);
           					socket.receive(inPacket);
           					String filename = new String(inPacket.getData(), 0, inPacket.getLength()); //PRZYCHODZI NAZWA PLIKU
           					
           					System.out.println("Requested file: "+filename);
           					int X=0;
           					for(int i=0; i<fl.length; i++) {
           						if(fl[i].getName()==filename) {
           							X=(int)fl[i].length();
           							outBuf=new byte[X];
           						}
           					}
           					boolean flis = false;
           					int index = -1;
           					sb = new StringBuilder("");
           					for(int i=0; i<fl.length; i++) {
           						
           						if(((fl[i].getName()).toString()).equalsIgnoreCase(filename)){
           							
           							index=i;
           							flis=true;
           							
           						}
           						
           					}
           					if(!flis){
           						
           						System.out.println("ERROR!");
           						sb.append("ERROR!");
           						outBuf = (sb.toString()).getBytes();
           						outPacket = new DatagramPacket(outBuf, 0, outBuf.length, source_address, source_port);
           						socket.send(outPacket);
           						
           					}
           					else{
           						
           						try {
           							
           							//File Send Process, Independent
           							File ff = new File(fl[index].getAbsolutePath());
           							int filesize = (int)ff.length();
           							int packsize=(int) filesize/20;
           							int size_of_segment=60000;
           							byte[] segment = new byte[size_of_segment];
           							
           							//FileInputStream in = new FileInputStream(ff);
           							//in.read(filedata);
           							// fr = new FileReader(ff);
           							//BufferedReader brf = new BufferedReader(fr);
           							//String s = null;
           							//sb = new StringBuilder();
           							//while((s = brf.readLine())!=null) {
           							//	sb.append(s);
           							//}
           							//if(brf.readLine()==null) {
           							//	System.out.println("File Read Successful. Closing Socket.");
           							//}
           			
           							for(int i=0;i<20;i++) {
           							sb = new StringBuilder();
           				            DataInputStream input = new DataInputStream( new FileInputStream( ff ) );
           					        try {
           					        	byte[] DATASIZE = sb.toString().getBytes();
           					        	int DATASIZElenght=DATASIZE.length;
           					        	int size_of_data=0;
           					        	for(int j=0;i<DATASIZElenght;i++) {
           					        		size_of_data=size_of_data+DATASIZE[j];
           					        	}
           					        	while(size_of_data<size_of_segment) {
           					                    sb.append( Integer.toBinaryString( input.readByte() ) );
           					                    
           					                }
           					        	segment = (sb.toString()).getBytes();
           					        	outPacket = new DatagramPacket(segment, 0, segment.length, source_address, source_port);
           					        	socket.send(outPacket); 
           					        } 
           					        catch( EOFException eof ) {
           					        }
           					        catch( IOException e ) {
           					        	e.printStackTrace();
           					        }
           					        //outBuf = new byte[100000];
           							 
           							}
           							
           							
           						}
           						catch(IOException ioe) {
           							
           							System.out.println(ioe);
           							
           						}
           					}
           				break;
           				case 2:
           					
           					ByteArrayOutputStream baos = new ByteArrayOutputStream();
           					DataOutputStream out = new DataOutputStream(baos);
           					for (String element : logins) {
           						
           						out.writeUTF(element);
           						
           					}
           					
           					
           					outBuf = baos.toByteArray();
           					outPacket = new DatagramPacket(outBuf, 0, outBuf.length, source_address, PORT);
           					socket.send(outPacket);
           					
           					/*
           					inBuf = new byte[1000];
           					inPacket = new DatagramPacket(inBuf, inBuf.length); //odebranie katalogu
           					socket.receive(inPacket);
           					String catalog = new String(inPacket.getData(), 0, inPacket.getLength());
           					System.out.println("Zapisano udostepniany katalog: "+catalog);
           					directories.add(catalog);
           					
           					*/
           				break;
           				case 3:
           					for(int i=0;i<users.size();i++) {
           						if(users.get(i).toString().contains(source_address.toString())) //usuwam obecnego uzytkownika 
           							users.remove(i);
           					}
           				break;
           				}
           			}
                       
                	   
                	   
                	   
                   } catch (IOException e) {
                       e.printStackTrace();
                       System.out.println("ERROR!!!!\n");
                   }

               }
           };
           executorService.submit(connection);
       }
   }
}