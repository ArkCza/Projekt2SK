//Sends all types of files within UDP Packe size limit

package rumba_main;


import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.net.DatagramPacket;
import java.net.DatagramSocket;
import java.net.InetAddress;
import java.util.List;

public class Serwer {
	
	public static void main(String[] args) {
		
		DatagramSocket socket = null;
		DatagramPacket inPacket = null; //recieving packet
		DatagramPacket outPacket = null; //sending packet
		byte[] inBuf, outBuf;
		String msg,user,chosen_address="",login,oneuser;
		int chosen_port=0,rozm;
		List<String> logins =  null;
		List<Integer> ports = null;
		List<String> addresses = null;
		List<String> users = null;
		List<String> directories = null;
		final int PORT = 50000;
		StringBuilder sbuild = null;
		try {
			
			socket = new DatagramSocket(PORT);
			// edit
			while(true) {
				
				System.out.println("\nRunning...\n");
				
				inBuf = new byte[100];
				inPacket = new DatagramPacket(inBuf, inBuf.length); //odebranie pustego stringa
				socket.receive(inPacket);
				int y=0;
				int source_port = inPacket.getPort();
				ports.add(source_port);
				InetAddress source_address = inPacket.getAddress();
				addresses.add(source_address.toString());
				msg = new String(inPacket.getData(), 0, inPacket.getLength()); //przypisanie do zmiennej msg na serwerze - nawiazanie polaczenia

				inBuf = new byte[100];
				inPacket = new DatagramPacket(inBuf, inBuf.length); //odebranie loginu
				socket.receive(inPacket);
				login = new String(inPacket.getData(), 0, inPacket.getLength());
				logins.add(login);
				
				for(int i=0;i<logins.size();i++) {
					user="Client - "+(String)logins.get(i)+" : "+(String)addresses.get(i)+":"+ports.get(i).toString();
					System.out.println(user); //wyswietlanie listy klientow
					users.add(user);
				}
				
				inBuf = new byte[100];
				inPacket = new DatagramPacket(inBuf, inBuf.length); //odebranie wyboru do switcha
				socket.receive(inPacket);
				String ch = new String(inPacket.getData(), 0, inPacket.getLength());
				int choice = new Integer(ch);
				
				switch(choice) {
				case 1:
					sbuild = new StringBuilder();
					rozm=users.size();
					sbuild.append(rozm);
					outBuf=(sbuild.toString()).getBytes();
					
					outPacket = new DatagramPacket(outBuf, 0, outBuf.length, source_address,PORT); //wys쓰nie rozmiaru listy
					socket.send(outPacket);
					for(int i=0;i<users.size();i++) {
						oneuser=(String)users.get(i);
						outBuf=oneuser.getBytes();
						outPacket = new DatagramPacket(outBuf, 0, outBuf.length, source_address,PORT); //wys쓰nie uzytkownikow
						socket.send(outPacket);
					}
					inBuf = new byte[300];
					inPacket = new DatagramPacket(inBuf, inBuf.length); //odebranie wyboru uzytkownika
					socket.receive(inPacket);
					String chosen_user = new String(inPacket.getData(), 0, inPacket.getLength());
					for(int i=0;i<users.size();i++) {
						if(logins.get(i).toString().contains(chosen_user.toString())) //identyfikuje wybranego uzytkownika
							chosen_address=addresses.get(i).toString();
							chosen_port=ports.get(i).intValue();
					}
					sbuild = new StringBuilder("");
					sbuild.append(chosen_port);
					
					outBuf=chosen_address.getBytes();
					outPacket = new DatagramPacket(outBuf, 0, outBuf.length, source_address,PORT); //wys쓰nie wybranego adresu
					socket.send(outPacket);
					
					outBuf=(sbuild.toString()).getBytes();
					outPacket = new DatagramPacket(outBuf, 0, outBuf.length, source_address,PORT); //wys쓰nie wybranego portu
					socket.send(outPacket);
					
					
				break;
				case 2:
					inBuf = new byte[100];
					inPacket = new DatagramPacket(inBuf, inBuf.length); //odebranie katalogu
					socket.receive(inPacket);
					String kat = new String(inPacket.getData(), 0, inPacket.getLength());
					directories.add(kat);
				break;
				case 3:
					for(int i=0;i<users.size();i++) {
						if(users.get(i).toString().contains(source_address.toString())) //usuwam obecnego uzytkownika 
							users.remove(i);
					}
				break;
				}
				
				StringBuilder sb = new StringBuilder("\n");
				String dirname="/media/";
				File f1=new File(dirname);
				File fl[]=f1.listFiles();
				
				
				int c = 0;
				
				for(int i=0; i<fl.length; i++) {
					
					if(fl[i].canRead())
						c++;
				}
				
				sb.append(c+" files found.\n\n");
				
				for(int i=0; i<fl.length; i++) {
					
					sb.append(fl[i].getName()+" "+fl[i].length()+ " Bytes\n");
					
				}
				sb.append("\nEnter file name for download: ");
				outBuf = (sb.toString()).getBytes();
				outPacket = new DatagramPacket(outBuf, 0, outBuf.length, source_address, source_port); //WYSLANIE ZAPYTANIA O PLIKI DO POBRANIA - PO WYBRANIU UZYTKOWNIKA
				socket.send(outPacket);
				
				inBuf = new byte[100];
				inPacket = new DatagramPacket(inBuf, inBuf.length);
				socket.receive(inPacket);
				String filename = new String(inPacket.getData(), 0, inPacket.getLength());
				
				System.out.println("Requested file: "+filename);
				
				boolean flis = false;
				int index = -1;
				sb = new StringBuilder("");
				for(int i=0; i<fl.length; i++) {
					
					if(((fl[i].getName()).toString()).equalsIgnoreCase(filename)){
						
						index=i;
						flis=true;
						
					}
					
				}
				
				if(!flis){
					
					System.out.println("ERROR");
					sb.append("ERROR");
					outBuf = (sb.toString()).getBytes();
					outPacket = new DatagramPacket(outBuf, 0, outBuf.length, source_address, source_port);
					socket.send(outPacket);
					
				}
				else{
					
					try {
						
						//File Send Process, Independent
						File ff = new File(fl[index].getAbsolutePath());
						FileReader fr = new FileReader(ff);
						BufferedReader brf = new BufferedReader(fr);
						String s = null;
						sb = new StringBuilder();
						
						while((s = brf.readLine())!=null) {
							
							sb.append(s);
							
						}
						
						if(brf.readLine()==null) {
							
							System.out.println("File Read Successful. Closing Socket.");
							
						}
						
						outBuf = new byte[100000];
						outBuf = (sb.toString()).getBytes();
						outPacket = new DatagramPacket(outBuf, 0, outBuf.length, source_address, source_port);
						socket.send(outPacket);
						
					}
					catch(IOException ioe) {
						
						System.out.println(ioe);
						
					}
				}
			}
		}
		catch(Exception e) {
			System.out.println("ERROR\n");
		}
	}
}
